/*
 * generated by Xtext
 */
package de.jax.heim.generator

import de.jax.heim.regelsprache.Geraet
import de.jax.heim.regelsprache.Regel
import de.jax.heim.regelsprache.Zustand
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class RegelspracheGenerator implements IGenerator {
    
    override void doGenerate(Resource resource, IFileSystemAccess fsa) {
        val packageName = "mein.heim"
    	val regeln = resource.contents.head.eContents.filter(Regel)
    	if (!regeln.empty) {
        	val nameMaschine = resource.URI.trimFileExtension.lastSegment+"RegelMaschine"
            fsa.generateFile(packageName.replace('.','/')+'/'+nameMaschine+'.java', bodyOfRegelMaschine(packageName, nameMaschine, regeln))
    	}
    	for (geraet : resource.contents.head.eContents.filter(Geraet)) {
    		fsa.generateFile(packageName.replace('.','/')+'/'+geraet.name+".java", generateEnum(packageName, geraet))
    	}
    }
    
    def generateEnum(String packageName, Geraet geraet) '''
        package «packageName»;
        public enum «geraet.name» {
        	«FOR zustand : geraet.zustaende SEPARATOR ','»
        	   «zustand.name»
        	«ENDFOR»
        }
    '''
    
    
    def bodyOfRegelMaschine(String packageName, String name, Iterable<? extends Regel> regeln) '''
        package «packageName»;

        import java.util.Scanner;
        
        public class «name» {
        
            public static void main(String[] args) {
                new «name»().run();
            }
        
            public void run() {
                Scanner sc = new Scanner(System.in);
                System.out.println("Haussimulator aktiviert. Folgende Befehle stehen zur Verfügung : ");
                «FOR zustand : regeln.map[wenn.geraet].map[zustaende].flatten»
                    System.out.println(" - «zustand.geraet.name» «zustand.name»");
                «ENDFOR»
                System.out.println("Warte auf Eingabe...");
                while(sc.hasNextLine()) {
                    String command = sc.nextLine();
                    String[] split = command.split(" ");
                    «FOR geraet : regeln.map[wenn.geraet]»
                        if (split[0].equals("«geraet.name»")) {
                        «FOR zustand : geraet.zustaende»
                            if (split[1].equals("«zustand.name»")) {
                                trigger(«geraet.name».«zustand.name»);
                            } else 
                            «ENDFOR»
                                {
                                System.err.println("Der Zustand "+split[1]+" ist für das Gerät "+split[0]+" nicht definiert.");
                            }
                        }
                    «ENDFOR»
                    System.out.println("Warte auf Eingabe...");
                }
            }
        
            protected void trigger(Enum<?> event) {
            	System.out.println("Signal '"+event.getClass().getSimpleName()+" "+event+"' eingegangen.");
                «FOR regel : regeln»
                    if (event == «regel.wenn.geraet.name».«regel.wenn.name») {
                        trigger(«regel.dann.geraet.name».«regel.dann.name»);
                    } 
                «ENDFOR»
            }
            
        }
    '''
    
    def getGeraet(Zustand zustand) {
    	zustand.eContainer as Geraet
    }
}
