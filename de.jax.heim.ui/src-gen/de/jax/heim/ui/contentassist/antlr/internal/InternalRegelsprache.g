/*
* generated by Xtext
*/
grammar InternalRegelsprache;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package de.jax.heim.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package de.jax.heim.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import de.jax.heim.services.RegelspracheGrammarAccess;

}

@parser::members {
 
 	private RegelspracheGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(RegelspracheGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getDeklarationenAssignment()); }
(rule__Model__DeklarationenAssignment)*
{ after(grammarAccess.getModelAccess().getDeklarationenAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDeklaration
entryRuleDeklaration 
:
{ before(grammarAccess.getDeklarationRule()); }
	 ruleDeklaration
{ after(grammarAccess.getDeklarationRule()); } 
	 EOF 
;

// Rule Deklaration
ruleDeklaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDeklarationAccess().getAlternatives()); }
(rule__Deklaration__Alternatives)
{ after(grammarAccess.getDeklarationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGeraet
entryRuleGeraet 
:
{ before(grammarAccess.getGeraetRule()); }
	 ruleGeraet
{ after(grammarAccess.getGeraetRule()); } 
	 EOF 
;

// Rule Geraet
ruleGeraet
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGeraetAccess().getGroup()); }
(rule__Geraet__Group__0)
{ after(grammarAccess.getGeraetAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleZustand
entryRuleZustand 
:
{ before(grammarAccess.getZustandRule()); }
	 ruleZustand
{ after(grammarAccess.getZustandRule()); } 
	 EOF 
;

// Rule Zustand
ruleZustand
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getZustandAccess().getNameAssignment()); }
(rule__Zustand__NameAssignment)
{ after(grammarAccess.getZustandAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRegel
entryRuleRegel 
:
{ before(grammarAccess.getRegelRule()); }
	 ruleRegel
{ after(grammarAccess.getRegelRule()); } 
	 EOF 
;

// Rule Regel
ruleRegel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRegelAccess().getGroup()); }
(rule__Regel__Group__0)
{ after(grammarAccess.getRegelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifiedName
entryRuleQualifiedName 
:
{ before(grammarAccess.getQualifiedNameRule()); }
	 ruleQualifiedName
{ after(grammarAccess.getQualifiedNameRule()); } 
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup()); }
(rule__QualifiedName__Group__0)
{ after(grammarAccess.getQualifiedNameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Deklaration__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeklarationAccess().getRegelParserRuleCall_0()); }
	ruleRegel
{ after(grammarAccess.getDeklarationAccess().getRegelParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getDeklarationAccess().getGeraetParserRuleCall_1()); }
	ruleGeraet
{ after(grammarAccess.getDeklarationAccess().getGeraetParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Geraet__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Geraet__Group__0__Impl
	rule__Geraet__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Geraet__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeraetAccess().getNameAssignment_0()); }
(rule__Geraet__NameAssignment_0)
{ after(grammarAccess.getGeraetAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Geraet__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Geraet__Group__1__Impl
	rule__Geraet__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Geraet__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeraetAccess().getKannKeyword_1()); }

	'kann' 

{ after(grammarAccess.getGeraetAccess().getKannKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Geraet__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Geraet__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Geraet__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeraetAccess().getGroup_2()); }
(rule__Geraet__Group_2__0)?
{ after(grammarAccess.getGeraetAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Geraet__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Geraet__Group_2__0__Impl
	rule__Geraet__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Geraet__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeraetAccess().getZustaendeAssignment_2_0()); }
(rule__Geraet__ZustaendeAssignment_2_0)
{ after(grammarAccess.getGeraetAccess().getZustaendeAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Geraet__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Geraet__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Geraet__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeraetAccess().getGroup_2_1()); }
(rule__Geraet__Group_2_1__0)*
{ after(grammarAccess.getGeraetAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Geraet__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Geraet__Group_2_1__0__Impl
	rule__Geraet__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Geraet__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeraetAccess().getCommaKeyword_2_1_0()); }

	',' 

{ after(grammarAccess.getGeraetAccess().getCommaKeyword_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Geraet__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Geraet__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Geraet__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeraetAccess().getZustaendeAssignment_2_1_1()); }
(rule__Geraet__ZustaendeAssignment_2_1_1)
{ after(grammarAccess.getGeraetAccess().getZustaendeAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Regel__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Regel__Group__0__Impl
	rule__Regel__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Regel__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegelAccess().getWennKeyword_0()); }

	'Wenn' 

{ after(grammarAccess.getRegelAccess().getWennKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Regel__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Regel__Group__1__Impl
	rule__Regel__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Regel__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegelAccess().getWennAssignment_1()); }
(rule__Regel__WennAssignment_1)
{ after(grammarAccess.getRegelAccess().getWennAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Regel__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Regel__Group__2__Impl
	rule__Regel__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Regel__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegelAccess().getDannKeyword_2()); }

	'dann' 

{ after(grammarAccess.getRegelAccess().getDannKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Regel__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Regel__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Regel__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegelAccess().getDannAssignment_3()); }
(rule__Regel__DannAssignment_3)
{ after(grammarAccess.getRegelAccess().getDannAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__QualifiedName__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__0__Impl
	rule__QualifiedName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
(rule__QualifiedName__Group_1__0)*
{ after(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedName__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__0__Impl
	rule__QualifiedName__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Model__DeklarationenAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getDeklarationenDeklarationParserRuleCall_0()); }
	ruleDeklaration{ after(grammarAccess.getModelAccess().getDeklarationenDeklarationParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Geraet__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeraetAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getGeraetAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Geraet__ZustaendeAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeraetAccess().getZustaendeZustandParserRuleCall_2_0_0()); }
	ruleZustand{ after(grammarAccess.getGeraetAccess().getZustaendeZustandParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Geraet__ZustaendeAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeraetAccess().getZustaendeZustandParserRuleCall_2_1_1_0()); }
	ruleZustand{ after(grammarAccess.getGeraetAccess().getZustaendeZustandParserRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Zustand__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getZustandAccess().getNameIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getZustandAccess().getNameIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Regel__WennAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegelAccess().getWennZustandCrossReference_1_0()); }
(
{ before(grammarAccess.getRegelAccess().getWennZustandQualifiedNameParserRuleCall_1_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getRegelAccess().getWennZustandQualifiedNameParserRuleCall_1_0_1()); }
)
{ after(grammarAccess.getRegelAccess().getWennZustandCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Regel__DannAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegelAccess().getDannZustandCrossReference_3_0()); }
(
{ before(grammarAccess.getRegelAccess().getDannZustandQualifiedNameParserRuleCall_3_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getRegelAccess().getDannZustandQualifiedNameParserRuleCall_3_0_1()); }
)
{ after(grammarAccess.getRegelAccess().getDannZustandCrossReference_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


