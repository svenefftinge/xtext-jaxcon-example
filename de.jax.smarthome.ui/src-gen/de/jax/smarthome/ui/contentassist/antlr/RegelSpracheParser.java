/*
* generated by Xtext
*/
package de.jax.smarthome.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import de.jax.smarthome.services.RegelSpracheGrammarAccess;

public class RegelSpracheParser extends AbstractContentAssistParser {
	
	@Inject
	private RegelSpracheGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected de.jax.smarthome.ui.contentassist.antlr.internal.InternalRegelSpracheParser createParser() {
		de.jax.smarthome.ui.contentassist.antlr.internal.InternalRegelSpracheParser result = new de.jax.smarthome.ui.contentassist.antlr.internal.InternalRegelSpracheParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getDefinitionAccess().getAlternatives(), "rule__Definition__Alternatives");
					put(grammarAccess.getArtikelAccess().getAlternatives(), "rule__Artikel__Alternatives");
					put(grammarAccess.getArtikelKleinAccess().getAlternatives(), "rule__ArtikelKlein__Alternatives");
					put(grammarAccess.getGeraetAccess().getGroup(), "rule__Geraet__Group__0");
					put(grammarAccess.getGeraetAccess().getGroup_3(), "rule__Geraet__Group_3__0");
					put(grammarAccess.getGeraetAccess().getGroup_3_1(), "rule__Geraet__Group_3_1__0");
					put(grammarAccess.getGeraetAccess().getGroup_3_1_0(), "rule__Geraet__Group_3_1_0__0");
					put(grammarAccess.getRegelAccess().getGroup(), "rule__Regel__Group__0");
					put(grammarAccess.getModelAccess().getDefinitionenAssignment(), "rule__Model__DefinitionenAssignment");
					put(grammarAccess.getGeraetAccess().getArtikelAssignment_0(), "rule__Geraet__ArtikelAssignment_0");
					put(grammarAccess.getGeraetAccess().getNameAssignment_1(), "rule__Geraet__NameAssignment_1");
					put(grammarAccess.getGeraetAccess().getZustaendeAssignment_3_0(), "rule__Geraet__ZustaendeAssignment_3_0");
					put(grammarAccess.getGeraetAccess().getZustaendeAssignment_3_1_0_1(), "rule__Geraet__ZustaendeAssignment_3_1_0_1");
					put(grammarAccess.getGeraetAccess().getZustaendeAssignment_3_1_2(), "rule__Geraet__ZustaendeAssignment_3_1_2");
					put(grammarAccess.getZustandAccess().getNameAssignment(), "rule__Zustand__NameAssignment");
					put(grammarAccess.getRegelAccess().getWennArtikelAssignment_1(), "rule__Regel__WennArtikelAssignment_1");
					put(grammarAccess.getRegelAccess().getWennGeraetAssignment_2(), "rule__Regel__WennGeraetAssignment_2");
					put(grammarAccess.getRegelAccess().getWennAssignment_3(), "rule__Regel__WennAssignment_3");
					put(grammarAccess.getRegelAccess().getDannArtikelAssignment_7(), "rule__Regel__DannArtikelAssignment_7");
					put(grammarAccess.getRegelAccess().getDannGeraetAssignment_8(), "rule__Regel__DannGeraetAssignment_8");
					put(grammarAccess.getRegelAccess().getDannAssignment_9(), "rule__Regel__DannAssignment_9");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			de.jax.smarthome.ui.contentassist.antlr.internal.InternalRegelSpracheParser typedParser = (de.jax.smarthome.ui.contentassist.antlr.internal.InternalRegelSpracheParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public RegelSpracheGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(RegelSpracheGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
