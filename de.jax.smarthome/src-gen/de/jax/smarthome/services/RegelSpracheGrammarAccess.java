/*
* generated by Xtext
*/
package de.jax.smarthome.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class RegelSpracheGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cDefinitionenAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDefinitionenDefinitionParserRuleCall_0 = (RuleCall)cDefinitionenAssignment.eContents().get(0);
		
		//Model:
		//	definitionen+=Definition*;
		public ParserRule getRule() { return rule; }

		//definitionen+=Definition*
		public Assignment getDefinitionenAssignment() { return cDefinitionenAssignment; }

		//Definition
		public RuleCall getDefinitionenDefinitionParserRuleCall_0() { return cDefinitionenDefinitionParserRuleCall_0; }
	}

	public class DefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Definition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGeraetParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRegelParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Definition:
		//	Geraet | Regel;
		public ParserRule getRule() { return rule; }

		//Geraet | Regel
		public Alternatives getAlternatives() { return cAlternatives; }

		//Geraet
		public RuleCall getGeraetParserRuleCall_0() { return cGeraetParserRuleCall_0; }

		//Regel
		public RuleCall getRegelParserRuleCall_1() { return cRegelParserRuleCall_1; }
	}

	public class GeraetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Geraet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cArtikelAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cArtikelArtikelParserRuleCall_0_0 = (RuleCall)cArtikelAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cKannKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cZustaendeAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cZustaendeZustandParserRuleCall_3_0_0 = (RuleCall)cZustaendeAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Group cGroup_3_1_0 = (Group)cGroup_3_1.eContents().get(0);
		private final Keyword cCommaKeyword_3_1_0_0 = (Keyword)cGroup_3_1_0.eContents().get(0);
		private final Assignment cZustaendeAssignment_3_1_0_1 = (Assignment)cGroup_3_1_0.eContents().get(1);
		private final RuleCall cZustaendeZustandParserRuleCall_3_1_0_1_0 = (RuleCall)cZustaendeAssignment_3_1_0_1.eContents().get(0);
		private final Keyword cUndKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Assignment cZustaendeAssignment_3_1_2 = (Assignment)cGroup_3_1.eContents().get(2);
		private final RuleCall cZustaendeZustandParserRuleCall_3_1_2_0 = (RuleCall)cZustaendeAssignment_3_1_2.eContents().get(0);
		
		//Geraet:
		//	artikel=Artikel name=ID "kann" (zustaende+=Zustand (("," zustaende+=Zustand)* "und" zustaende+=Zustand)*)?;
		public ParserRule getRule() { return rule; }

		//artikel=Artikel name=ID "kann" (zustaende+=Zustand (("," zustaende+=Zustand)* "und" zustaende+=Zustand)*)?
		public Group getGroup() { return cGroup; }

		//artikel=Artikel
		public Assignment getArtikelAssignment_0() { return cArtikelAssignment_0; }

		//Artikel
		public RuleCall getArtikelArtikelParserRuleCall_0_0() { return cArtikelArtikelParserRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"kann"
		public Keyword getKannKeyword_2() { return cKannKeyword_2; }

		//(zustaende+=Zustand (("," zustaende+=Zustand)* "und" zustaende+=Zustand)*)?
		public Group getGroup_3() { return cGroup_3; }

		//zustaende+=Zustand
		public Assignment getZustaendeAssignment_3_0() { return cZustaendeAssignment_3_0; }

		//Zustand
		public RuleCall getZustaendeZustandParserRuleCall_3_0_0() { return cZustaendeZustandParserRuleCall_3_0_0; }

		//(("," zustaende+=Zustand)* "und" zustaende+=Zustand)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//("," zustaende+=Zustand)*
		public Group getGroup_3_1_0() { return cGroup_3_1_0; }

		//","
		public Keyword getCommaKeyword_3_1_0_0() { return cCommaKeyword_3_1_0_0; }

		//zustaende+=Zustand
		public Assignment getZustaendeAssignment_3_1_0_1() { return cZustaendeAssignment_3_1_0_1; }

		//Zustand
		public RuleCall getZustaendeZustandParserRuleCall_3_1_0_1_0() { return cZustaendeZustandParserRuleCall_3_1_0_1_0; }

		//"und"
		public Keyword getUndKeyword_3_1_1() { return cUndKeyword_3_1_1; }

		//zustaende+=Zustand
		public Assignment getZustaendeAssignment_3_1_2() { return cZustaendeAssignment_3_1_2; }

		//Zustand
		public RuleCall getZustaendeZustandParserRuleCall_3_1_2_0() { return cZustaendeZustandParserRuleCall_3_1_2_0; }
	}

	public class ArtikelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Artikel");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cDerKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cDieKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cDasKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//Artikel:
		//	"Der" | "Die" | "Das";
		public ParserRule getRule() { return rule; }

		//"Der" | "Die" | "Das"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"Der"
		public Keyword getDerKeyword_0() { return cDerKeyword_0; }

		//"Die"
		public Keyword getDieKeyword_1() { return cDieKeyword_1; }

		//"Das"
		public Keyword getDasKeyword_2() { return cDasKeyword_2; }
	}

	public class ZustandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Zustand");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Zustand:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class RegelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Regel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWennKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cWennArtikelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cWennArtikelArtikelKleinParserRuleCall_1_0 = (RuleCall)cWennArtikelAssignment_1.eContents().get(0);
		private final Assignment cWennGeraetAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cWennGeraetGeraetCrossReference_2_0 = (CrossReference)cWennGeraetAssignment_2.eContents().get(0);
		private final RuleCall cWennGeraetGeraetIDTerminalRuleCall_2_0_1 = (RuleCall)cWennGeraetGeraetCrossReference_2_0.eContents().get(1);
		private final Assignment cWennAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cWennZustandCrossReference_3_0 = (CrossReference)cWennAssignment_3.eContents().get(0);
		private final RuleCall cWennZustandIDTerminalRuleCall_3_0_1 = (RuleCall)cWennZustandCrossReference_3_0.eContents().get(1);
		private final Keyword cIstKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cMussKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cDannArtikelAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cDannArtikelArtikelKleinParserRuleCall_7_0 = (RuleCall)cDannArtikelAssignment_7.eContents().get(0);
		private final Assignment cDannGeraetAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final CrossReference cDannGeraetGeraetCrossReference_8_0 = (CrossReference)cDannGeraetAssignment_8.eContents().get(0);
		private final RuleCall cDannGeraetGeraetIDTerminalRuleCall_8_0_1 = (RuleCall)cDannGeraetGeraetCrossReference_8_0.eContents().get(1);
		private final Assignment cDannAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final CrossReference cDannZustandCrossReference_9_0 = (CrossReference)cDannAssignment_9.eContents().get(0);
		private final RuleCall cDannZustandIDTerminalRuleCall_9_0_1 = (RuleCall)cDannZustandCrossReference_9_0.eContents().get(1);
		private final Keyword cFullStopKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//Regel:
		//	"Wenn" wennArtikel=ArtikelKlein wennGeraet=[Geraet] wenn=[Zustand] "ist" "," "muss" dannArtikel=ArtikelKlein
		//	dannGeraet=[Geraet] dann=[Zustand] "."?;
		public ParserRule getRule() { return rule; }

		//"Wenn" wennArtikel=ArtikelKlein wennGeraet=[Geraet] wenn=[Zustand] "ist" "," "muss" dannArtikel=ArtikelKlein
		//dannGeraet=[Geraet] dann=[Zustand] "."?
		public Group getGroup() { return cGroup; }

		//"Wenn"
		public Keyword getWennKeyword_0() { return cWennKeyword_0; }

		//wennArtikel=ArtikelKlein
		public Assignment getWennArtikelAssignment_1() { return cWennArtikelAssignment_1; }

		//ArtikelKlein
		public RuleCall getWennArtikelArtikelKleinParserRuleCall_1_0() { return cWennArtikelArtikelKleinParserRuleCall_1_0; }

		//wennGeraet=[Geraet]
		public Assignment getWennGeraetAssignment_2() { return cWennGeraetAssignment_2; }

		//[Geraet]
		public CrossReference getWennGeraetGeraetCrossReference_2_0() { return cWennGeraetGeraetCrossReference_2_0; }

		//ID
		public RuleCall getWennGeraetGeraetIDTerminalRuleCall_2_0_1() { return cWennGeraetGeraetIDTerminalRuleCall_2_0_1; }

		//wenn=[Zustand]
		public Assignment getWennAssignment_3() { return cWennAssignment_3; }

		//[Zustand]
		public CrossReference getWennZustandCrossReference_3_0() { return cWennZustandCrossReference_3_0; }

		//ID
		public RuleCall getWennZustandIDTerminalRuleCall_3_0_1() { return cWennZustandIDTerminalRuleCall_3_0_1; }

		//"ist"
		public Keyword getIstKeyword_4() { return cIstKeyword_4; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//"muss"
		public Keyword getMussKeyword_6() { return cMussKeyword_6; }

		//dannArtikel=ArtikelKlein
		public Assignment getDannArtikelAssignment_7() { return cDannArtikelAssignment_7; }

		//ArtikelKlein
		public RuleCall getDannArtikelArtikelKleinParserRuleCall_7_0() { return cDannArtikelArtikelKleinParserRuleCall_7_0; }

		//dannGeraet=[Geraet]
		public Assignment getDannGeraetAssignment_8() { return cDannGeraetAssignment_8; }

		//[Geraet]
		public CrossReference getDannGeraetGeraetCrossReference_8_0() { return cDannGeraetGeraetCrossReference_8_0; }

		//ID
		public RuleCall getDannGeraetGeraetIDTerminalRuleCall_8_0_1() { return cDannGeraetGeraetIDTerminalRuleCall_8_0_1; }

		//dann=[Zustand]
		public Assignment getDannAssignment_9() { return cDannAssignment_9; }

		//[Zustand]
		public CrossReference getDannZustandCrossReference_9_0() { return cDannZustandCrossReference_9_0; }

		//ID
		public RuleCall getDannZustandIDTerminalRuleCall_9_0_1() { return cDannZustandIDTerminalRuleCall_9_0_1; }

		//"."?
		public Keyword getFullStopKeyword_10() { return cFullStopKeyword_10; }
	}

	public class ArtikelKleinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArtikelKlein");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cDerKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cDieKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cDasKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//ArtikelKlein:
		//	"der" | "die" | "das";
		public ParserRule getRule() { return rule; }

		//"der" | "die" | "das"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"der"
		public Keyword getDerKeyword_0() { return cDerKeyword_0; }

		//"die"
		public Keyword getDieKeyword_1() { return cDieKeyword_1; }

		//"das"
		public Keyword getDasKeyword_2() { return cDasKeyword_2; }
	}
	
	
	private ModelElements pModel;
	private DefinitionElements pDefinition;
	private GeraetElements pGeraet;
	private ArtikelElements pArtikel;
	private ZustandElements pZustand;
	private RegelElements pRegel;
	private ArtikelKleinElements pArtikelKlein;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public RegelSpracheGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.jax.smarthome.RegelSprache".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	definitionen+=Definition*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Definition:
	//	Geraet | Regel;
	public DefinitionElements getDefinitionAccess() {
		return (pDefinition != null) ? pDefinition : (pDefinition = new DefinitionElements());
	}
	
	public ParserRule getDefinitionRule() {
		return getDefinitionAccess().getRule();
	}

	//Geraet:
	//	artikel=Artikel name=ID "kann" (zustaende+=Zustand (("," zustaende+=Zustand)* "und" zustaende+=Zustand)*)?;
	public GeraetElements getGeraetAccess() {
		return (pGeraet != null) ? pGeraet : (pGeraet = new GeraetElements());
	}
	
	public ParserRule getGeraetRule() {
		return getGeraetAccess().getRule();
	}

	//Artikel:
	//	"Der" | "Die" | "Das";
	public ArtikelElements getArtikelAccess() {
		return (pArtikel != null) ? pArtikel : (pArtikel = new ArtikelElements());
	}
	
	public ParserRule getArtikelRule() {
		return getArtikelAccess().getRule();
	}

	//Zustand:
	//	name=ID;
	public ZustandElements getZustandAccess() {
		return (pZustand != null) ? pZustand : (pZustand = new ZustandElements());
	}
	
	public ParserRule getZustandRule() {
		return getZustandAccess().getRule();
	}

	//Regel:
	//	"Wenn" wennArtikel=ArtikelKlein wennGeraet=[Geraet] wenn=[Zustand] "ist" "," "muss" dannArtikel=ArtikelKlein
	//	dannGeraet=[Geraet] dann=[Zustand] "."?;
	public RegelElements getRegelAccess() {
		return (pRegel != null) ? pRegel : (pRegel = new RegelElements());
	}
	
	public ParserRule getRegelRule() {
		return getRegelAccess().getRule();
	}

	//ArtikelKlein:
	//	"der" | "die" | "das";
	public ArtikelKleinElements getArtikelKleinAccess() {
		return (pArtikelKlein != null) ? pArtikelKlein : (pArtikelKlein = new ArtikelKleinElements());
	}
	
	public ParserRule getArtikelKleinRule() {
		return getArtikelKleinAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
