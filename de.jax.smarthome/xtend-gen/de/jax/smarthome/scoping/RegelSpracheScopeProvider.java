/**
 * generated by Xtext
 */
package de.jax.smarthome.scoping;

import com.google.common.base.Objects;
import de.jax.smarthome.regelSprache.Geraet;
import de.jax.smarthome.regelSprache.Regel;
import de.jax.smarthome.regelSprache.RegelSprachePackage;
import de.jax.smarthome.regelSprache.Zustand;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#scoping
 * on how and when to use it
 */
@SuppressWarnings("all")
public class RegelSpracheScopeProvider extends AbstractDeclarativeScopeProvider {
  public IScope getScope(final EObject context, final EReference reference) {
    if ((context instanceof Regel)) {
      boolean _matched = false;
      if (!_matched) {
        if (Objects.equal(reference, RegelSprachePackage.Literals.REGEL__WENN)) {
          _matched=true;
          Geraet _wennGeraet = ((Regel)context).getWennGeraet();
          EList<Zustand> _zustaende = _wennGeraet.getZustaende();
          return Scopes.scopeFor(_zustaende);
        }
      }
      if (!_matched) {
        if (Objects.equal(reference, RegelSprachePackage.Literals.REGEL__DANN)) {
          _matched=true;
          Geraet _dannGeraet = ((Regel)context).getDannGeraet();
          EList<Zustand> _zustaende_1 = _dannGeraet.getZustaende();
          return Scopes.scopeFor(_zustaende_1);
        }
      }
    }
    return super.getScope(context, reference);
  }
}
